/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-08-11T22:52:56.101Z
  3.10.0.3
  
  Standalone prediction code with sample test data for GBMModel named gbm

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://10.89.207.206:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://10.89.207.206:54321/3/Models.java/gbm > gbm.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm", algorithm="gbm")
public class gbm extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 6; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* carat */ null,
    /* cut */ gbm_ColInfo_1.VALUES,
    /* color */ gbm_ColInfo_2.VALUES,
    /* clarity */ gbm_ColInfo_3.VALUES,
    /* depth */ null,
    /* table */ null,
    /* price */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-6862930883195977084L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_Forest_0.score0(data,preds);
    gbm_Forest_1.score0(data,preds);
    gbm_Forest_2.score0(data,preds);
    gbm_Forest_3.score0(data,preds);
    gbm_Forest_4.score0(data,preds);
    gbm_Forest_5.score0(data,preds);
    gbm_Forest_6.score0(data,preds);
    gbm_Forest_7.score0(data,preds);
    gbm_Forest_8.score0(data,preds);
    gbm_Forest_9.score0(data,preds);
    gbm_Forest_10.score0(data,preds);
    gbm_Forest_11.score0(data,preds);
    gbm_Forest_12.score0(data,preds);
    gbm_Forest_13.score0(data,preds);
    gbm_Forest_14.score0(data,preds);
    gbm_Forest_15.score0(data,preds);
    gbm_Forest_16.score0(data,preds);
    gbm_Forest_17.score0(data,preds);
    gbm_Forest_18.score0(data,preds);
    gbm_Forest_19.score0(data,preds);
    gbm_Forest_20.score0(data,preds);
    gbm_Forest_21.score0(data,preds);
    gbm_Forest_22.score0(data,preds);
    gbm_Forest_23.score0(data,preds);
    gbm_Forest_24.score0(data,preds);
    gbm_Forest_25.score0(data,preds);
    gbm_Forest_26.score0(data,preds);
    gbm_Forest_27.score0(data,preds);
    gbm_Forest_28.score0(data,preds);
    gbm_Forest_29.score0(data,preds);
    gbm_Forest_30.score0(data,preds);
    gbm_Forest_31.score0(data,preds);
    gbm_Forest_32.score0(data,preds);
    gbm_Forest_33.score0(data,preds);
    gbm_Forest_34.score0(data,preds);
    gbm_Forest_35.score0(data,preds);
    gbm_Forest_36.score0(data,preds);
    gbm_Forest_37.score0(data,preds);
    preds[0] += 3932.799721913237;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    NamesHolder_gbm_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "carat";
      sa[1] = "cut";
      sa[2] = "color";
      sa[3] = "clarity";
      sa[4] = "depth";
      sa[5] = "table";
    }
  }
}
// The class representing column cut
class gbm_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Fair";
      sa[1] = "Good";
      sa[2] = "Ideal";
      sa[3] = "Premium";
      sa[4] = "Very Good";
    }
  }
}
// The class representing column color
class gbm_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "D";
      sa[1] = "E";
      sa[2] = "F";
      sa[3] = "G";
      sa[4] = "H";
      sa[5] = "I";
      sa[6] = "J";
    }
  }
}
// The class representing column clarity
class gbm_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    gbm_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "I1";
      sa[1] = "IF";
      sa[2] = "SI1";
      sa[3] = "SI2";
      sa[4] = "VS1";
      sa[5] = "VS2";
      sa[6] = "VVS1";
      sa[7] = "VVS2";
    }
  }
}

class gbm_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_0_class_0.score0(fdata);
  }
}
class gbm_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.6151988f ? 
            -28.974764f : 
            -8.67391f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            21.13734f : 
            83.15497f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_1_class_0.score0(fdata);
  }
}
class gbm_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.605091f ? 
            -28.95306f : 
            -9.311271f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            20.886337f : 
            83.300186f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_2_class_0.score0(fdata);
  }
}
class gbm_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.6750683f ? 
            -28.09506f : 
            -7.955157f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3607223f ? 
            19.86241f : 
            80.92183f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_3_class_0.score0(fdata);
  }
}
class gbm_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.605091f ? 
            -27.975515f : 
            -8.633112f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            21.911268f : 
            82.52599f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_4_class_0.score0(fdata);
  }
}
class gbm_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.605091f ? 
            -27.783827f : 
            -8.897447f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            21.698027f : 
            81.81122f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_5_class_0.score0(fdata);
  }
}
class gbm_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.6151988f ? 
            -27.316936f : 
            -8.438048f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3568026f ? 
            19.618065f : 
            79.95974f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_6_class_0.score0(fdata);
  }
}
class gbm_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.5848753f ? 
            -27.628464f : 
            -9.121705f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            20.668734f : 
            74.71109f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_7_class_0.score0(fdata);
  }
}
class gbm_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.6548526f ? 
            -26.938002f : 
            -7.095683f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4038395f ? 
            21.108324f : 
            74.0835f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_8_class_0.score0(fdata);
  }
}
class gbm_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.59498316f ? 
            -26.78745f : 
            -8.545559f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.576308f ? 
            26.60127f : 
            96.52481f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_9_class_0.score0(fdata);
  }
}
class gbm_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.59498316f ? 
            -26.67096f : 
            -8.905768f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.470475f ? 
            19.434496f : 
            75.23172f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_10_class_0.score0(fdata);
  }
}
class gbm_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.6447448f ? 
            -26.015066f : 
            -7.394792f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4155986f ? 
            20.74337f : 
            75.27712f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_11_class_0.score0(fdata);
  }
}
class gbm_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.62530667f ? 
            -25.88748f : 
            -7.7999153f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3568026f ? 
            18.401447f : 
            71.68757f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_12_class_0.score0(fdata);
  }
}
class gbm_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.62530667f ? 
            -25.65085f : 
            -7.6205897f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.5057527f ? 
            22.03094f : 
            77.83123f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_13_class_0.score0(fdata);
  }
}
class gbm_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.59498316f ? 
            -25.69019f : 
            -7.923195f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            20.214521f : 
            73.457085f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_14_class_0.score0(fdata);
  }
}
class gbm_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.695284f ? 
            -24.869694f : 
            -7.042968f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.5057527f ? 
            19.71868f : 
            77.78453f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_15_class_0.score0(fdata);
  }
}
class gbm_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.68517613f ? 
            -24.720102f : 
            -6.744533f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3568026f ? 
            17.265318f : 
            71.126015f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_16_class_0.score0(fdata);
  }
}
class gbm_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.59498316f ? 
            -24.63789f : 
            -7.9160447f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4783145f ? 
            18.387543f : 
            68.25469f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_17_class_0.score0(fdata);
  }
}
class gbm_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.79489905f ? 
            -21.883118f : 
            9.523651f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.6840607f ? 
            39.447968f : 
            90.58446f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_18_class_0.score0(fdata);
  }
}
class gbm_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.5047901f ? 
            -26.309908f : 
            -10.771606f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3450433f ? 
            16.720968f : 
            65.72887f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_19_class_0.score0(fdata);
  }
}
class gbm_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8948421f ? 
            -20.576591f : 
            9.821015f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.6765698f ? 
            36.983925f : 
            90.587906f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_20_class_0.score0(fdata);
  }
}
class gbm_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.62530667f ? 
            -23.860798f : 
            -6.864458f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4273579f ? 
            17.403316f : 
            68.360435f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_21_class_0.score0(fdata);
  }
}
class gbm_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.77491045f ? 
            -21.019531f : 
            8.801275f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.7814418f ? 
            40.265915f : 
            91.805244f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_22_class_0.score0(fdata);
  }
}
class gbm_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8453465f ? 
            -20.22827f : 
            12.173444f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.6166431f ? 
            37.27967f : 
            81.45553f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_23_class_0.score0(fdata);
  }
}
class gbm_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.695284f ? 
            -22.918585f : 
            -6.470941f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4822342f ? 
            18.07073f : 
            66.05445f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_24_class_0.score0(fdata);
  }
}
class gbm_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1934717f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.85487634f ? 
            -19.796843f : 
            10.982013f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.6146315f ? 
            37.837322f : 
            82.544136f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_25_class_0.score0(fdata);
  }
}
class gbm_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8853237f ? 
            -19.268808f : 
            9.765799f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.7065333f ? 
            36.842342f : 
            87.446556f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_26_class_0.score0(fdata);
  }
}
class gbm_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1934717f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.82480055f ? 
            -19.74037f : 
            10.076243f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.8718f ? 
            40.14982f : 
            89.606026f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_27_class_0.score0(fdata);
  }
}
class gbm_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.5047901f ? 
            -24.301958f : 
            -10.121536f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4939934f ? 
            16.998512f : 
            65.74676f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_28_class_0.score0(fdata);
  }
}
class gbm_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1934717f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.79569495f ? 
            -19.504766f : 
            8.577967f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.6146315f ? 
            33.987747f : 
            81.45068f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_29_class_0.score0(fdata);
  }
}
class gbm_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.5047901f ? 
            -23.662333f : 
            -9.274723f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3959999f ? 
            15.904195f : 
            61.470955f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_30_class_0.score0(fdata);
  }
}
class gbm_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8948421f ? 
            -18.630016f : 
            9.165952f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.7065333f ? 
            35.563046f : 
            78.07891f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_31_class_0.score0(fdata);
  }
}
class gbm_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1934717f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.79569495f ? 
            -18.85647f : 
            8.558913f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.685446f ? 
            35.7498f : 
            82.36627f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_32_class_0.score0(fdata);
  }
}
class gbm_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.5250058f ? 
            -22.340818f : 
            -8.230098f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.4038395f ? 
            15.976169f : 
            60.445835f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_33_class_0.score0(fdata);
  }
}
class gbm_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1746826f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8748535f ? 
            -18.013702f : 
            9.825279f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.9125317f ? 
            35.87395f : 
            84.228836f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_34_class_0.score0(fdata);
  }
}
class gbm_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.005581f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.62481815f ? 
            -20.80668f : 
            -3.9416897f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3614424f ? 
            15.86527f : 
            61.166782f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_35_class_0.score0(fdata);
  }
}
class gbm_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.2052149f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.8557456f ? 
            -17.93061f : 
            10.402959f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.7031066f ? 
            36.988316f : 
            79.839424f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_36_class_0.score0(fdata);
  }
}
class gbm_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <0.9961865f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.59498316f ? 
            -20.568895f : 
            -5.6186957f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.3881605f ? 
            15.203978f : 
            57.88355f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class gbm_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_Tree_37_class_0.score0(fdata);
  }
}
class gbm_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* carat */] <1.1230127f ? 
         (Double.isNaN(data[0]) || data[0 /* carat */] <0.7949105f ? 
            -17.95603f : 
            7.8968616f) : 
         (Double.isNaN(data[0]) || data[0 /* carat */] <1.513989f ? 
            28.772474f : 
            68.97449f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}



